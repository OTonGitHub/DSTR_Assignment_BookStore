in_dbFile.open((dbFileName + ".txt"), std::ios::app); //RECIEVING ID FROM LIST
    string fileItem;
    while (getline(in_dbFile, fileItem))
    {
        string stringLine = fileItem; //BUG
        char charLine[100];           //stringLine.length() inside charLine[] not required, DynamicAlloc                    //BUG
        strcpy(charLine, stringLine.c_str());
        int readID = atoi(charLine); //BUG
                                     //if (readID >= 0 || readID <= 100)
                                     //{ //BUG
        /*cout << endl
                 << readID << endl;
            _getch();*/
        //TESTING, NOT REQUIRED
        item_ID = readID; //BUG
        //}
    }
    in_dbFile.close();


    case 1:

    out_dbFile.open((dbFileName + ".txt"), std::ios::app);
                    vector<string> bookDataVector; // ::: REMINDER ::: STUDY VECTORS
                    system("CLS");
                    int id;
                    string id_string, name, author, category;
                    cout << "__ADDING NEW ITEM__" << endl;

                    cout << "\nID : " << item_ID << endl;
                    cout << "NAME : ";
                    cin.ignore();
                    getline(cin, name);
                    cout << "AUTHOR NAME : ";
                    getline(cin, author);
                    cout << "CATEGORY : ";
                    getline(cin, category);
                    //cin.ignore();

                    id_string = to_string(item_ID);
                    bookDataVector.push_back(id_string);
                    bookDataVector.push_back(name);
                    bookDataVector.push_back(author);
                    bookDataVector.push_back(category);

                    //out_dbFile << to_string(id) << endl; //CAN'T PLACE INT TYPE IN VECTOR<STRING>
                    for (string item : bookDataVector)
                    {
                        out_dbFile << item << endl;
                    }
                    out_dbFile << endl;
                    out_dbFile.close(); //IMPORTANT
                                        //TEST OUTSTEAM

                    item_ID++;


                    case 2:
                     system("CLS");
                    cout << "READING FROM " << dbFileName << "..." << endl;
                    Sleep(1250);
                    in_dbFile.open(dbFileName + ".txt");
                    string fileItem; //REPITITIVE MUTABLE STRING ?? MOVE OUT OF SWITCH CASE INTO WHILE(TRUE) TO MAKE GLOBALLY AVAIABLE INSIDE SWITCH CASE

                    /*getline(in_dbFile, fileItem); //DID NOT READ ENTIRE LINE !
                while (!in_dbFile.eof())
                {
                    cout << fileItem << endl; //SPITS OUT
                    in_dbFile >> fileItem;    //STRANGE BEHAVIOUR ::: CHECK WITH DEBUGGER //WARNING ::::::: MUTABLE TYPE (STRING) OVERWRITTEN ?
                }*/

                    unsigned int lineNumber = 0; //unsigned = positive int
                    while (getline(in_dbFile, fileItem))
                    {
                        cout << "[" << lineNumber << "] " << fileItem << endl;
                        lineNumber++;
                    }

                    in_dbFile.close(); //IMPORTANT